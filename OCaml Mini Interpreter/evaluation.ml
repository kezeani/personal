(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
open CS51Utils ;;
open Absbook ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
	   
    (* the type of values (including closures) stored in
       environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string

    (* env_tests -- Tests environment functions *)
    val env_tests : unit -> unit
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let rec lookup (env : env) (varname : varid) : value =
      if env = [] then raise (EvalError "Variable Not Found")
      else let var, ref = List.hd env in
      if var = varname then !ref
      else lookup (List.tl env) varname 

    let rec find (env : env) (varname : varid) : bool =
      if env = [] then false
      else let var, _ = List.hd env in
      if var = varname then true
      else find (List.tl env) varname
    let extend (env : env) (varname : varid) (loc : value ref) : env =
      if (find env varname) then
        List.map (fun (var, ref) -> if var = varname 
                          then ref := !loc; (var, ref)) env
      else
        env @ [(varname, loc)]

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with 
      | Val exp -> exp_to_concrete_string exp
      | Closure (exp, env) -> 
        if printenvp then exp_to_concrete_string exp 
                          ^ "where" ^ env_to_string env
        else exp_to_concrete_string exp
    and env_to_string (env : env) : string =
      if env = empty () then "[]" else
      List.fold_left (fun str (var, ref) ->
        let point =
        match !ref with 
        | Val x -> exp_to_concrete_string x
        | Closure (_, _) -> 
          value_to_string !ref ~printenvp:true
        in str ^ "[" ^ var ^ " -> " 
          ^ point ^ "] ") "" env
    

    let env_tests () =
      unit_test (close (Num 5) (empty ()) = Closure(Num 5, (empty ())))
      "close empty env";;
      unit_test (close (Var "x") [("x", ref (Val (Num 3)))] 
                = Closure(Var "x", [("x", ref (Val (Num 3)))]))
      "close w/ env";;
      unit_test (try let _ = lookup [] "x" in false
                  with 
                  | EvalError _ -> true 
                  | _ -> false)
      "lookup empty env";;
      unit_test (lookup [("x", ref (Val (Num 5)))] "x" = Val (Num 5))
      "lookup active env";;
      unit_test (lookup [("x", ref (Val (Num 5))); 
                        ("y", ref (Val (Bool true)))] "y" 
                          = Val (Bool true))
      "lookup recursive env";;
      unit_test (extend (empty ()) "x" (ref(Val (Num 5))) 
                      = [("x", ref(Val (Num 5)))])
      "extend empty env";;
      unit_test (extend [("x", ref(Val(Num 1)))] "x" (ref(Val(Num 5))) 
                      = [("x", ref(Val(Num 5)))])
      "extend replace current var";;
      unit_test (extend [("y", ref(Val(Num 1)))] "x" (ref(Val(Num 5))) 
                = [("y", ref(Val(Num 1))); ("x", ref(Val(Num 5)))])
      "extend add to current env";;
      unit_test (env_to_string [("y", ref(Val(Num 1)))] = "[y -> 1 ] ")
      "env_to_string one elt";;
      unit_test (env_to_string [] = "[]")
      "env_to_string empty env";;
      unit_test (env_to_string [("x", ref(Val(Num 1)));
                                ("y", ref(Val(Num 4)));
                                ("z", ref(Val(Bool true)))] 
                                = "[x -> 1 ] [y -> 4 ] [z -> true ] ")
      "env_to_string multiple elts";;
      unit_test (value_to_string (Val(Num 5)) ~printenvp:true 
                = exp_to_concrete_string (Num 5))
      "value_to_string val";;
      unit_test (value_to_string (Closure(Bool true, ["x", ref(Val(Num 1))]))
                 ~printenvp:false = exp_to_concrete_string (Bool true))
      "value_to_string deny closure";;
      unit_test (value_to_string (Closure(Var "x", ["x", ref(Val(Num 1))]))
                 ~printenvp:true = exp_to_concrete_string (Var "x")
                                ^ "where" ^ env_to_string ["x", ref(Val(Num 1))])
      "value_to_string val w/ closure";;
  end
;;



let test_all () =
  Env.env_tests ();;

let _ = test_all ();;
(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let rec eval_s (exp : expr) (_env : Env.env) : Env.value =
  match exp with  
  | Bool _ 
  | String _
  | Fun _
  | Num _
  | Float _
  | Unassigned 
  | Raise -> Env.Val exp 
  | Var x -> raise (EvalError ("Unbound variable " ^ x))
  | Ref x -> Env.Val(Ref(let Env.Val x = eval_s x _env in x))
  | Unop (u, expr) -> (match u with 
                      | Negate -> 
                        let Env.Val x = eval_s expr _env in 
                        (match x with 
                        | Num n   -> Env.Val (Num (~-n))
                        | Float n -> Env.Val (Float (~-.n))
                        | _       -> raise (EvalError "Negate Invalid expression type"))
                      | Sqrt -> 
                        let Env.Val x = eval_s expr _env in 
                        (match x with 
                        | Float n -> Env.Val (Float (Float.sqrt n))
                        | _       -> raise (EvalError "Sqrt Float expected"))
                      | Log -> 
                        let Env.Val x = eval_s expr _env in 
                        (match x with 
                        | Float n -> Env.Val (Float (Float.log n))
                        | _       -> raise (EvalError "Log Float expected"))
                      | Deref -> 
                        let Env.Val x = eval_s expr _env in 
                        (match x with 
                        | Ref n -> Env.Val n
                        | _       -> raise (EvalError "Reference expected")))
  | Binop (op, e1, e2) -> 
    let (Env.Val a), (Env.Val b) = eval_s e1 _env, eval_s e2 _env in
    (match a, b with
    | Num x, Num y ->
      (match op with
      | Equals      -> Env.Val (Bool (( = ) x y))
      | LessThan    -> Env.Val (Bool (( < ) x y))
      | GreaterThan -> Env.Val (Bool (( > ) x y))
      | _        -> 
          let sign =
          match op with
          | Plus   -> ( + )
          | Minus  -> ( - )
          | Times  -> ( * )
          | Divide -> ( / ) in 
          Env.Val (Num (sign x y)))
    | Bool x, Bool y -> 
      (match op with
      | Equals      -> Env.Val (Bool (( = ) x y))
      | LessThan    -> Env.Val (Bool (( < ) x y))
      | GreaterThan -> Env.Val (Bool (( > ) x y))
      | _ -> raise (EvalError "Bool operator expected"))
    | Float x, Float y ->
      (match op with
      | Equals      -> Env.Val (Bool (( = ) x y))
      | LessThan    -> Env.Val (Bool (( < ) x y))
      | GreaterThan -> Env.Val (Bool (( > ) x y))
      | _        -> 
          let sign =
          match op with
          | Plus   -> ( +. )
          | Minus  -> ( -. )
          | Times  -> ( *. )
          | Divide -> ( /. ) in 
          Env.Val (Float (sign x y)))
    | Ref x, y -> 
      if same_type x y then Env.Val (Ref y)
      else raise (EvalError "Incompatible ref types")
    | _   -> raise (EvalError "Incompatible expressions"))
  | Conditional (e1, e2, e3) -> let Env.Val cond = eval_s e1 _env in 
                                (match cond with 
                                | Bool x -> if x then eval_s e2 _env
                                            else eval_s e3 _env
                                | _ -> raise (EvalError "Expression expected of type bool"))
  | Let (var, e1, e2) -> let Env.Val s1 = eval_s e1 _env in 
                         eval_s (subst var s1 e2) _env
  | Letrec (var, e1, e2) -> let Env.Val s1 = eval_s e1 _env in 
                            eval_s (subst var 
                            (subst var 
                            (Letrec(var, s1, Var(var))) s1) e2) _env
  | App (e1, e2) -> 
    match (eval_s e1 _env) with 
    | Env.Val (Fun (var, expr)) -> 
      let Env.Val s2 = eval_s e2 _env in
      eval_s (subst var s2 expr) _env
    | _ -> raise (EvalError "Invalid Function Argument")


(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d (_exp : expr) (_env : Env.env) : Env.value =
  match _exp with
  | String _
  | Num _
  | Float _
  | Bool _
  | Unassigned 
  | Raise 
  | Fun _ ->  Env.Val _exp 
  | Var x -> Env.lookup _env x 
  | Ref x -> Env.Val(Ref(let Env.Val x = eval_d x _env in x))
  | Binop (op, e1, e2) -> 
    let Env.Val s1, Env.Val s2 = (eval_d e1 _env), (eval_d e2 _env) in
    (match s1, s2 with 
    | Num x, Num y -> 
      (match op with
      | Equals      -> Env.Val (Bool (( = ) x y))
      | LessThan    -> Env.Val (Bool (( < ) x y))
      | GreaterThan -> Env.Val (Bool (( > ) x y))
      | _        -> 
          let sign =
          match op with
          | Plus   -> ( + )
          | Minus  -> ( - )
          | Times  -> ( * )
          | Divide -> ( / ) in 
          Env.Val (Num (sign x y)))
    | Bool x, Bool y -> 
      (match op with
      | Equals      -> Env.Val (Bool (( = ) x y))
      | LessThan    -> Env.Val (Bool (( < ) x y))
      | GreaterThan -> Env.Val (Bool (( > ) x y))
      | _ -> raise (EvalError "Bool operator expected"))
    | Float x, Float y -> 
      (match op with
      | Equals      -> Env.Val (Bool (( = ) x y))
      | LessThan    -> Env.Val (Bool (( < ) x y))
      | GreaterThan -> Env.Val (Bool (( > ) x y))
      | _        -> 
          let sign =
          match op with
          | Plus   -> ( +. )
          | Minus  -> ( -. )
          | Times  -> ( *. )
          | Divide -> ( /. ) in 
          Env.Val (Float (sign x y)))
    | Ref x, y -> 
      if same_type x y then Env.Val (Ref y)
      else raise (EvalError "Incompatible ref types")
    | _   -> raise (EvalError "Incompatible expressions"))
  | Unop (u, expr) -> 
      (match u with 
        | Negate -> 
          let Env.Val x = eval_d expr _env in 
          (match x with 
          | Num n   -> Env.Val (Num (~-n))
          | Float n -> Env.Val (Float (~-.n))
          | _       -> raise (EvalError "Negate Invalid expression type"))
        | Sqrt -> 
          let Env.Val x = eval_d expr _env in 
          (match x with 
          | Float n -> Env.Val (Float (Float.sqrt n))
          | _       -> raise (EvalError "Sqrt Invalid expression type"))
        | Log -> 
          let Env.Val x = eval_d expr _env in 
          (match x with 
          | Float n -> Env.Val (Float (Float.log n))
          | _       -> raise (EvalError "Log Float expected"))
        | Deref -> 
          let Env.Val x = eval_d expr _env in 
          (match x with 
          | Ref n -> Env.Val n
          | _       -> raise (EvalError "Reference expected")))
  | Conditional (e1, e2, e3) -> let Env.Val cond = eval_d e1 _env in 
                                (match cond with 
                                | Bool x -> if x then eval_d e2 _env
                                            else eval_d e3 _env
                                | _ -> raise (EvalError "Expression expected of type bool"))
  | Let (var, e1, e2) 
  | Letrec (var, e1, e2) -> eval_d e2 (Env.extend _env var (ref(eval_d e1 _env)))
  | App (e1, e2) -> 
    match (eval_d e1 _env) with 
    | Env.Val (Fun (var, expr)) -> 
      let s2 = eval_d e2 _env in
      eval_d expr (Env.extend _env var (ref s2))
    | _ -> raise (EvalError "Invalid Function Argument")


       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let rec eval_l (_exp : expr) (_env : Env.env) : Env.value =
  match _exp with
  | String _
  | Num _
  | Float _
  | Bool _
  | Unassigned 
  | Raise -> Env.Val _exp
  | Var x -> Env.lookup _env x 
  | Ref x -> Env.Val(Ref(let Env.Val x = eval_l x _env in x))
  | Binop (op, e1, e2) -> 
    let Env.Val s1, Env.Val s2 = (eval_l e1 _env), (eval_l e2 _env) in
    (match s1, s2 with 
    | Num x, Num y -> 
      (match op with
      | Equals      -> Env.Val (Bool (( = ) x y))
      | LessThan    -> Env.Val (Bool (( < ) x y))
      | GreaterThan -> Env.Val (Bool (( > ) x y))
      | _        -> 
          let sign =
          match op with
          | Plus   -> ( + )
          | Minus  -> ( - )
          | Times  -> ( * )
          | Divide -> ( / ) in 
          Env.Val (Num (sign x y)))
    | Bool x, Bool y -> 
      (match op with
      | Equals      -> Env.Val (Bool (( = ) x y))
      | LessThan    -> Env.Val (Bool (( < ) x y))
      | GreaterThan -> Env.Val (Bool (( > ) x y))
      | _ -> raise (EvalError "Bool operator expected"))
    | Float x, Float y -> 
      (match op with
      | Equals      -> Env.Val (Bool (( = ) x y))
      | LessThan    -> Env.Val (Bool (( < ) x y))
      | GreaterThan -> Env.Val (Bool (( > ) x y))
      | _        -> 
          let sign =
          match op with
          | Plus   -> ( +. )
          | Minus  -> ( -. )
          | Times  -> ( *. )
          | Divide -> ( /. ) in 
          Env.Val (Float (sign x y)))
    | Ref x, y -> 
      if same_type x y then Env.Val (Ref y)
      else raise (EvalError "Incompatible ref types")
    | _   -> raise (EvalError "Incompatible expressions"))
  | Unop (u, expr) -> 
    (match u with 
      | Negate -> 
        let Env.Val x = eval_l expr _env in 
        (match x with 
        | Num n   -> Env.Val (Num (~-n))
        | Float n -> Env.Val (Float (~-.n))
        | _       -> raise (EvalError "Negate Invalid expression type"))
      | Sqrt -> 
        let Env.Val x = eval_l expr _env in 
        (match x with 
        | Float n -> Env.Val (Float (Float.sqrt n))
        | _       -> raise (EvalError "Sqrt Invalid expression type"))
      | Log -> 
        let Env.Val x = eval_l expr _env in 
        (match x with 
        | Float n -> Env.Val (Float (Float.log n))
        | _       -> raise (EvalError "Log Float expected"))
      | Deref -> 
        let Env.Val x = eval_l expr _env in 
        (match x with 
        | Ref n -> Env.Val n
        | _       -> raise (EvalError "Reference expected")))
  | Conditional (e1, e2, e3) -> let Env.Val cond = eval_l e1 _env in 
    (match cond with 
    | Bool x -> if x then eval_l e2 _env
                else eval_l e3 _env
    | _ -> raise (EvalError "Expression expected of type bool"))
  | Fun _ -> Env.Closure(_exp, _env)
  | App (e1, e2) -> 
    (match (eval_l e1 _env) with 
    | Env.Closure(Fun(var, exp), env) -> eval_l exp (Env.extend env var (ref (eval_l e2 env)))
    | _ -> raise (EvalError "Invalid Function Argument"))
  | Letrec (var, e1, e2) -> let env_x = Env.extend _env var (ref (Env.Val Unassigned)) in 
                            let vd = eval_l e1 env_x in
                            let env_y = Env.extend env_x var (ref vd) in
                            eval_l e2 env_y
  | Let (var, e1, e2) -> eval_d e2 (Env.extend _env var (ref(eval_d e1 _env)))

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compaetible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_s ;;
